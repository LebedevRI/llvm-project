// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --check-attributes --check-globals
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions                                | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-NO-EXCEPTIONS
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions -fexceptions                   | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-EXCEPTIONS,CHECK-NORMAL-NOEXCEPT
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions -fexceptions -fstrict-noexcept | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-EXCEPTIONS,CHECK-STRICT-NOEXCEPT

void will_throw(int line = __builtin_LINE());
void might_throw(int line = __builtin_LINE());
void will_not_throw(int line = __builtin_LINE()) noexcept;

struct RAIIStruct {
  RAIIStruct(int line = __builtin_LINE());
  ~RAIIStruct();
};

// CHECK-NO-EXCEPTIONS: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NO-EXCEPTIONS-LABEL: define {{[^@]+}}@_Z45exception_escape_is_program_termination_or_ubi
// CHECK-NO-EXCEPTIONS-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] {
// CHECK-NO-EXCEPTIONS-NEXT:  entry:
// CHECK-NO-EXCEPTIONS-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[STATE:%.*]] = alloca [[STRUCT_RAIISTRUCT:%.*]], align 1
// CHECK-NO-EXCEPTIONS-NEXT:    [[STATE3:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-NO-EXCEPTIONS-NEXT:    [[STATE7:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-NO-EXCEPTIONS-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]], i32 noundef 100)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z11might_throwi(i32 noundef 200)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]]) #[[ATTR3:[0-9]+]]
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END]]
// CHECK-NO-EXCEPTIONS:       if.end:
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 1
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END4:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then2:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]], i32 noundef 300)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z11might_throwi(i32 noundef 400)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]]) #[[ATTR3]]
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END4]]
// CHECK-NO-EXCEPTIONS:       if.end4:
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP5:%.*]] = icmp eq i32 [[TMP2]], 2
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP5]], label [[IF_THEN6:%.*]], label [[IF_END8:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then6:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE7]], i32 noundef 600)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 700)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE7]]) #[[ATTR3]]
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END8]]
// CHECK-NO-EXCEPTIONS:       if.end8:
// CHECK-NO-EXCEPTIONS-NEXT:    ret void
//
// CHECK-NORMAL-NOEXCEPT: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NORMAL-NOEXCEPT-LABEL: define {{[^@]+}}@_Z45exception_escape_is_program_termination_or_ubi
// CHECK-NORMAL-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-NORMAL-NOEXCEPT-NEXT:  entry:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[STATE:%.*]] = alloca [[STRUCT_RAIISTRUCT:%.*]], align 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[STATE4:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[STATE11:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]], i32 noundef 100)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 200)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT1:%.*]] unwind label [[TERMINATE_LPAD]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont1:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]]) #[[ATTR5:[0-9]+]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END]]
// CHECK-NORMAL-NOEXCEPT:       if.end:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP2:%.*]] = icmp eq i32 [[TMP1]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP2]], label [[IF_THEN3:%.*]], label [[IF_END8:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then3:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE4]], i32 noundef 300)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT5:%.*]] unwind label [[LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont5:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 400)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT7:%.*]] unwind label [[LPAD6:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont7:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE4]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[TRY_CONT:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP2:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP3:%.*]] = extractvalue { ptr, i32 } [[TMP2]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP3]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP4:%.*]] = extractvalue { ptr, i32 } [[TMP2]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP4]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[CATCH:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad6:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP5:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP6:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP6]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP7:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP7]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE4]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[CATCH]]
// CHECK-NORMAL-NOEXCEPT:       catch:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP8:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @__cxa_rethrow() #[[ATTR6:[0-9]+]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[UNREACHABLE:%.*]] unwind label [[TERMINATE_LPAD]]
// CHECK-NORMAL-NOEXCEPT:       try.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END8]]
// CHECK-NORMAL-NOEXCEPT:       if.end8:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP9:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP9:%.*]] = icmp eq i32 [[TMP9]], 2
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP9]], label [[IF_THEN10:%.*]], label [[IF_END14:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then10:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE11]], i32 noundef 600)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT12:%.*]] unwind label [[TERMINATE_LPAD]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont12:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 700)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT13:%.*]] unwind label [[TERMINATE_LPAD]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont13:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE11]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END14]]
// CHECK-NORMAL-NOEXCEPT:       if.end14:
// CHECK-NORMAL-NOEXCEPT-NEXT:    ret void
// CHECK-NORMAL-NOEXCEPT:       terminate.lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP10:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP11:%.*]] = extractvalue { ptr, i32 } [[TMP10]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @__clang_call_terminate(ptr [[TMP11]]) #[[ATTR7:[0-9]+]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
// CHECK-NORMAL-NOEXCEPT:       unreachable:
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
//
// CHECK-STRICT-NOEXCEPT: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-STRICT-NOEXCEPT-LABEL: define {{[^@]+}}@_Z45exception_escape_is_program_termination_or_ubi
// CHECK-STRICT-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-STRICT-NOEXCEPT-NEXT:  entry:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[STATE:%.*]] = alloca [[STRUCT_RAIISTRUCT:%.*]], align 1
// CHECK-STRICT-NOEXCEPT-NEXT:    [[STATE3:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[STATE9:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]], i32 noundef 100) #[[ATTR5:[0-9]+]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z11might_throwi(i32 noundef 200) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END]]
// CHECK-STRICT-NOEXCEPT:       if.end:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END6:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then2:
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]], i32 noundef 300)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[LPAD:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont:
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 400)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT5:%.*]] unwind label [[LPAD4:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont5:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[TRY_CONT:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP2:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP3:%.*]] = extractvalue { ptr, i32 } [[TMP2]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP3]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP4:%.*]] = extractvalue { ptr, i32 } [[TMP2]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP4]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[CATCH:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad4:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP5:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP6:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP6]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP7:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP7]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[CATCH]]
// CHECK-STRICT-NOEXCEPT:       catch:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP8:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @__cxa_rethrow() #[[ATTR6:[0-9]+]]
// CHECK-STRICT-NOEXCEPT-NEXT:    unreachable
// CHECK-STRICT-NOEXCEPT:       try.cont:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END6]]
// CHECK-STRICT-NOEXCEPT:       if.end6:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP9:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP7:%.*]] = icmp eq i32 [[TMP9]], 2
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP7]], label [[IF_THEN8:%.*]], label [[IF_END10:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then8:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE9]], i32 noundef 600) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 700) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE9]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END10]]
// CHECK-STRICT-NOEXCEPT:       if.end10:
// CHECK-STRICT-NOEXCEPT-NEXT:    ret void
//
void exception_escape_is_program_termination_or_ub(int x) noexcept {
  if(x == 0) {
#line 100
    RAIIStruct state;
#line 200
    might_throw();
  }
  if(x == 1) {
    try {
#line 300
      RAIIStruct state;
#line 400
      might_throw();
    } catch (...) {
#line 500
      throw;
    }
  }
  if(x == 2) {
#line 600
    RAIIStruct state;
#line 700
    will_throw();
  }
}

// CHECK-NO-EXCEPTIONS: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NO-EXCEPTIONS-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-NO-EXCEPTIONS-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0]] {
// CHECK-NO-EXCEPTIONS-NEXT:  entry:
// CHECK-NO-EXCEPTIONS-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[STATE:%.*]] = alloca [[STRUCT_RAIISTRUCT:%.*]], align 1
// CHECK-NO-EXCEPTIONS-NEXT:    [[STATE3:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-NO-EXCEPTIONS-NEXT:    [[STATE7:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-NO-EXCEPTIONS-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]], i32 noundef 100)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z11might_throwi(i32 noundef 200)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]]) #[[ATTR3]]
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END]]
// CHECK-NO-EXCEPTIONS:       if.end:
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 1
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END4:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then2:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]], i32 noundef 300)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z11might_throwi(i32 noundef 400)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]]) #[[ATTR3]]
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END4]]
// CHECK-NO-EXCEPTIONS:       if.end4:
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP5:%.*]] = icmp eq i32 [[TMP2]], 2
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP5]], label [[IF_THEN6:%.*]], label [[IF_END8:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then6:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE7]], i32 noundef 600)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 700)
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE7]]) #[[ATTR3]]
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END8]]
// CHECK-NO-EXCEPTIONS:       if.end8:
// CHECK-NO-EXCEPTIONS-NEXT:    ret void
//
// CHECK-NORMAL-NOEXCEPT: Function Attrs: mustprogress noinline optnone
// CHECK-NORMAL-NOEXCEPT-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-NORMAL-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR4:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-NORMAL-NOEXCEPT-NEXT:  entry:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[STATE:%.*]] = alloca [[STRUCT_RAIISTRUCT:%.*]], align 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[STATE3:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[STATE13:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]], i32 noundef 100)
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 200)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END]]
// CHECK-NORMAL-NOEXCEPT:       lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP1:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    cleanup
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP2:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP2]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP3:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP3]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[EH_RESUME:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.end:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP4:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP4]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END10:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then2:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]], i32 noundef 300)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT5:%.*]] unwind label [[LPAD4:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont5:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 400)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT7:%.*]] unwind label [[LPAD6:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont7:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[TRY_CONT:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad4:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP5:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP6:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP6]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP7:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP7]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[CATCH:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad6:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP8:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP9:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP9]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP10:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP10]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[CATCH]]
// CHECK-NORMAL-NOEXCEPT:       catch:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP11:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @__cxa_rethrow() #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[UNREACHABLE:%.*]] unwind label [[LPAD8:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad8:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP12:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    cleanup
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP13:%.*]] = extractvalue { ptr, i32 } [[TMP12]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP13]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP14:%.*]] = extractvalue { ptr, i32 } [[TMP12]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP14]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @__cxa_end_catch()
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT9:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont9:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[EH_RESUME]]
// CHECK-NORMAL-NOEXCEPT:       try.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END10]]
// CHECK-NORMAL-NOEXCEPT:       if.end10:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP15:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP11:%.*]] = icmp eq i32 [[TMP15]], 2
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP11]], label [[IF_THEN12:%.*]], label [[IF_END16:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then12:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE13]], i32 noundef 600)
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 700)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT15:%.*]] unwind label [[LPAD14:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont15:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE13]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END16]]
// CHECK-NORMAL-NOEXCEPT:       lpad14:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP16:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    cleanup
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP17:%.*]] = extractvalue { ptr, i32 } [[TMP16]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP17]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP18:%.*]] = extractvalue { ptr, i32 } [[TMP16]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP18]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE13]]) #[[ATTR5]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[EH_RESUME]]
// CHECK-NORMAL-NOEXCEPT:       if.end16:
// CHECK-NORMAL-NOEXCEPT-NEXT:    ret void
// CHECK-NORMAL-NOEXCEPT:       eh.resume:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN17:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[LPAD_VAL:%.*]] = insertvalue { ptr, i32 } poison, ptr [[EXN17]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[LPAD_VAL18:%.*]] = insertvalue { ptr, i32 } [[LPAD_VAL]], i32 [[SEL]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    resume { ptr, i32 } [[LPAD_VAL18]]
// CHECK-NORMAL-NOEXCEPT:       terminate.lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP19:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP20:%.*]] = extractvalue { ptr, i32 } [[TMP19]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @__clang_call_terminate(ptr [[TMP20]]) #[[ATTR7]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
// CHECK-NORMAL-NOEXCEPT:       unreachable:
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
//
// CHECK-STRICT-NOEXCEPT: Function Attrs: mustprogress noinline optnone
// CHECK-STRICT-NOEXCEPT-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-STRICT-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR3:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-STRICT-NOEXCEPT-NEXT:  entry:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[STATE:%.*]] = alloca [[STRUCT_RAIISTRUCT:%.*]], align 1
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[STATE3:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-STRICT-NOEXCEPT-NEXT:    [[STATE13:%.*]] = alloca [[STRUCT_RAIISTRUCT]], align 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]], i32 noundef 100)
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 200)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[LPAD:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END]]
// CHECK-STRICT-NOEXCEPT:       lpad:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP1:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    cleanup
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP2:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP2]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP3:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP3]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[EH_RESUME:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.end:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP4:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP4]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END10:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then2:
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]], i32 noundef 300)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT5:%.*]] unwind label [[LPAD4:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont5:
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 400)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT7:%.*]] unwind label [[LPAD6:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont7:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[TRY_CONT:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad4:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP5:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP6:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP6]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP7:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP7]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[CATCH:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad6:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP8:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP9:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP9]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP10:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP10]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE3]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[CATCH]]
// CHECK-STRICT-NOEXCEPT:       catch:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP11:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @__cxa_rethrow() #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[UNREACHABLE:%.*]] unwind label [[LPAD8:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad8:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP12:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    cleanup
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP13:%.*]] = extractvalue { ptr, i32 } [[TMP12]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP13]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP14:%.*]] = extractvalue { ptr, i32 } [[TMP12]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP14]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @__cxa_end_catch()
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT9:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont9:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[EH_RESUME]]
// CHECK-STRICT-NOEXCEPT:       try.cont:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END10]]
// CHECK-STRICT-NOEXCEPT:       if.end10:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP15:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP11:%.*]] = icmp eq i32 [[TMP15]], 2
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP11]], label [[IF_THEN12:%.*]], label [[IF_END16:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then12:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructC1Ei(ptr noundef nonnull align 1 dereferenceable(1) [[STATE13]], i32 noundef 600)
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 700)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT15:%.*]] unwind label [[LPAD14:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont15:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE13]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END16]]
// CHECK-STRICT-NOEXCEPT:       lpad14:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP16:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    cleanup
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP17:%.*]] = extractvalue { ptr, i32 } [[TMP16]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP17]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP18:%.*]] = extractvalue { ptr, i32 } [[TMP16]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP18]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_ZN10RAIIStructD1Ev(ptr noundef nonnull align 1 dereferenceable(1) [[STATE13]]) #[[ATTR5]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[EH_RESUME]]
// CHECK-STRICT-NOEXCEPT:       if.end16:
// CHECK-STRICT-NOEXCEPT-NEXT:    ret void
// CHECK-STRICT-NOEXCEPT:       eh.resume:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN17:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[LPAD_VAL:%.*]] = insertvalue { ptr, i32 } poison, ptr [[EXN17]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    [[LPAD_VAL18:%.*]] = insertvalue { ptr, i32 } [[LPAD_VAL]], i32 [[SEL]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    resume { ptr, i32 } [[LPAD_VAL18]]
// CHECK-STRICT-NOEXCEPT:       terminate.lpad:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP19:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP20:%.*]] = extractvalue { ptr, i32 } [[TMP19]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @__clang_call_terminate(ptr [[TMP20]]) #[[ATTR7:[0-9]+]]
// CHECK-STRICT-NOEXCEPT-NEXT:    unreachable
// CHECK-STRICT-NOEXCEPT:       unreachable:
// CHECK-STRICT-NOEXCEPT-NEXT:    unreachable
//
void exception_escape_is_ok(int x) {
  if(x == 0) {
#line 100
    RAIIStruct state;
#line 200
    might_throw();
  }
  if(x == 1) {
    try {
#line 300
      RAIIStruct state;
#line 400
      might_throw();
    } catch (...) {
#line 500
      throw;
    }
  }
  if(x == 2) {
#line 600
    RAIIStruct state;
#line 700
    will_throw();
  }
}
//.
// CHECK-NO-EXCEPTIONS: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NO-EXCEPTIONS: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NO-EXCEPTIONS: attributes #2 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NO-EXCEPTIONS: attributes #3 = { nounwind }
//.
// CHECK-NORMAL-NOEXCEPT: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #2 = { noinline noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #3 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #4 = { mustprogress noinline optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #5 = { nounwind }
// CHECK-NORMAL-NOEXCEPT: attributes #6 = { noreturn }
// CHECK-NORMAL-NOEXCEPT: attributes #7 = { noreturn nounwind }
//.
// CHECK-STRICT-NOEXCEPT: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #2 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #3 = { mustprogress noinline optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #4 = { noinline noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #5 = { nounwind }
// CHECK-STRICT-NOEXCEPT: attributes #6 = { noreturn }
// CHECK-STRICT-NOEXCEPT: attributes #7 = { noreturn nounwind }
//.
//// NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
// CHECK-ALL: {{.*}}
// CHECK-EXCEPTIONS: {{.*}}
