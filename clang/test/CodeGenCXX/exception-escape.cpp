// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --check-attributes --check-globals
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions                                | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-NO-EXCEPTIONS
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions -fexceptions                   | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-EXCEPTIONS,CHECK-NORMAL-NOEXCEPT
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions -fexceptions -fstrict-noexcept | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-EXCEPTIONS,CHECK-STRICT-NOEXCEPT

void will_throw(int line = __builtin_LINE());
void might_throw(int line = __builtin_LINE());
void will_not_throw(int line = __builtin_LINE()) noexcept;

//.
// CHECK-ALL: @_ZTIi = external constant ptr
//.
// CHECK-NO-EXCEPTIONS: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NO-EXCEPTIONS-LABEL: define {{[^@]+}}@_Z45exception_escape_is_program_termination_or_ubi
// CHECK-NO-EXCEPTIONS-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] {
// CHECK-NO-EXCEPTIONS-NEXT:  entry:
// CHECK-NO-EXCEPTIONS-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NO-EXCEPTIONS-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 2
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 100)
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END]]
// CHECK-NO-EXCEPTIONS:       if.end:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z14will_not_throwi(i32 noundef 200) #[[ATTR3:[0-9]+]]
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 3
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END3:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then2:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 300)
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END3]]
// CHECK-NO-EXCEPTIONS:       if.end3:
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP4:%.*]] = icmp eq i32 [[TMP2]], 4
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP4]], label [[IF_THEN5:%.*]], label [[IF_END6:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then5:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z14will_not_throwi(i32 noundef 400) #[[ATTR3]]
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 500)
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END6]]
// CHECK-NO-EXCEPTIONS:       if.end6:
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP7:%.*]] = icmp eq i32 [[TMP3]], 5
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP7]], label [[IF_THEN8:%.*]], label [[IF_END9:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then8:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 900)
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END9]]
// CHECK-NO-EXCEPTIONS:       if.end9:
// CHECK-NO-EXCEPTIONS-NEXT:    ret void
//
// CHECK-NORMAL-NOEXCEPT: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NORMAL-NOEXCEPT-LABEL: define {{[^@]+}}@_Z45exception_escape_is_program_termination_or_ubi
// CHECK-NORMAL-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-NORMAL-NOEXCEPT-NEXT:  entry:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[X15:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 2
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 100)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END]]
// CHECK-NORMAL-NOEXCEPT:       if.end:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 200) #[[ATTR6:[0-9]+]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 3
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END4:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then2:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 300)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT3:%.*]] unwind label [[TERMINATE_LPAD]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont3:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END4]]
// CHECK-NORMAL-NOEXCEPT:       if.end4:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP5:%.*]] = icmp eq i32 [[TMP2]], 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP5]], label [[IF_THEN6:%.*]], label [[IF_END9:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then6:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 400) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 500)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT7:%.*]] unwind label [[LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont7:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[TRY_CONT:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP3:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP4:%.*]] = extractvalue { ptr, i32 } [[TMP3]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP4]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP5:%.*]] = extractvalue { ptr, i32 } [[TMP3]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP5]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[CATCH:%.*]]
// CHECK-NORMAL-NOEXCEPT:       catch:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP6:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 600) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 700)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT8:%.*]] unwind label [[TERMINATE_LPAD]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont8:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @__cxa_rethrow() #[[ATTR7:[0-9]+]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[UNREACHABLE:%.*]] unwind label [[TERMINATE_LPAD]]
// CHECK-NORMAL-NOEXCEPT:       try.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END9]]
// CHECK-NORMAL-NOEXCEPT:       if.end9:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP7:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP10:%.*]] = icmp eq i32 [[TMP7]], 5
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP10]], label [[IF_THEN11:%.*]], label [[IF_END18:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then11:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 900)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT13:%.*]] unwind label [[LPAD12:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont13:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[TRY_CONT17:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad12:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP8:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr @_ZTIi
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP9:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP9]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP10:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP10]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[CATCH_DISPATCH:%.*]]
// CHECK-NORMAL-NOEXCEPT:       catch.dispatch:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP11:%.*]] = call i32 @llvm.eh.typeid.for(ptr @_ZTIi) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[MATCHES:%.*]] = icmp eq i32 [[SEL]], [[TMP11]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[MATCHES]], label [[CATCH14:%.*]], label [[TERMINATE_HANDLER:%.*]]
// CHECK-NORMAL-NOEXCEPT:       catch14:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN16:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP12:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN16]]) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP13:%.*]] = load i32, ptr [[TMP12]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP13]], ptr [[X15]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXCEPTION:%.*]] = call ptr @__cxa_allocate_exception(i64 4) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP14:%.*]] = load i32, ptr [[X15]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP14]], ptr [[EXCEPTION]], align 16
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @__cxa_throw(ptr [[EXCEPTION]], ptr @_ZTIi, ptr null) #[[ATTR7]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[UNREACHABLE]] unwind label [[TERMINATE_LPAD]]
// CHECK-NORMAL-NOEXCEPT:       try.cont17:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END18]]
// CHECK-NORMAL-NOEXCEPT:       if.end18:
// CHECK-NORMAL-NOEXCEPT-NEXT:    ret void
// CHECK-NORMAL-NOEXCEPT:       terminate.lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP15:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP16:%.*]] = extractvalue { ptr, i32 } [[TMP15]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @__clang_call_terminate(ptr [[TMP16]]) #[[ATTR8:[0-9]+]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
// CHECK-NORMAL-NOEXCEPT:       terminate.handler:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN19:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @__clang_call_terminate(ptr [[EXN19]]) #[[ATTR8]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
// CHECK-NORMAL-NOEXCEPT:       unreachable:
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
//
// CHECK-STRICT-NOEXCEPT: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-STRICT-NOEXCEPT-LABEL: define {{[^@]+}}@_Z45exception_escape_is_program_termination_or_ubi
// CHECK-STRICT-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-STRICT-NOEXCEPT-NEXT:  entry:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[X12:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 2
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 100) #[[ATTR6:[0-9]+]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END]]
// CHECK-STRICT-NOEXCEPT:       if.end:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 200) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 3
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END3:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then2:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 300) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END3]]
// CHECK-STRICT-NOEXCEPT:       if.end3:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP4:%.*]] = icmp eq i32 [[TMP2]], 4
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP4]], label [[IF_THEN5:%.*]], label [[IF_END6:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then5:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 400) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 500)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[LPAD:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[TRY_CONT:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP3:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP4:%.*]] = extractvalue { ptr, i32 } [[TMP3]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP4]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP5:%.*]] = extractvalue { ptr, i32 } [[TMP3]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP5]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[CATCH:%.*]]
// CHECK-STRICT-NOEXCEPT:       catch:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP6:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 600) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z11might_throwi(i32 noundef 700) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @__cxa_rethrow() #[[ATTR7:[0-9]+]]
// CHECK-STRICT-NOEXCEPT-NEXT:    unreachable
// CHECK-STRICT-NOEXCEPT:       try.cont:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END6]]
// CHECK-STRICT-NOEXCEPT:       if.end6:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP7:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP7:%.*]] = icmp eq i32 [[TMP7]], 5
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP7]], label [[IF_THEN8:%.*]], label [[IF_END15:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then8:
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 900)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT10:%.*]] unwind label [[LPAD9:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont10:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[TRY_CONT14:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad9:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP8:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr @_ZTIi
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP9:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP9]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP10:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP10]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[CATCH_DISPATCH:%.*]]
// CHECK-STRICT-NOEXCEPT:       catch.dispatch:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP11:%.*]] = call i32 @llvm.eh.typeid.for(ptr @_ZTIi) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    [[MATCHES:%.*]] = icmp eq i32 [[SEL]], [[TMP11]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[MATCHES]], label [[CATCH11:%.*]], label [[UNREACHABLE:%.*]]
// CHECK-STRICT-NOEXCEPT:       catch11:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN13:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP12:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN13]]) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP13:%.*]] = load i32, ptr [[TMP12]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP13]], ptr [[X12]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXCEPTION:%.*]] = call ptr @__cxa_allocate_exception(i64 4) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP14:%.*]] = load i32, ptr [[X12]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP14]], ptr [[EXCEPTION]], align 16
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @__cxa_throw(ptr [[EXCEPTION]], ptr @_ZTIi, ptr null) #[[ATTR7]]
// CHECK-STRICT-NOEXCEPT-NEXT:    unreachable
// CHECK-STRICT-NOEXCEPT:       try.cont14:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END15]]
// CHECK-STRICT-NOEXCEPT:       if.end15:
// CHECK-STRICT-NOEXCEPT-NEXT:    ret void
// CHECK-STRICT-NOEXCEPT:       unreachable:
// CHECK-STRICT-NOEXCEPT-NEXT:    unreachable
//
void exception_escape_is_program_termination_or_ub(int x) noexcept {
  if (x == 2) {
#line 100
    will_throw();
  }
#line 200
  will_not_throw();
  if (x == 3) {
#line 300
    will_throw();
  }
  if (x == 4) {
    try {
#line 400
      will_not_throw();
#line 500
      will_throw();
    } catch (...) {
#line 600
      will_not_throw();
#line 700
      might_throw();
#line 800
      throw;
    }
  }
  if (x == 5) {
    try {
#line 900
      will_throw();
    } catch (int x) {
#line 1000
      throw x;
    }
  }
}

// CHECK-NO-EXCEPTIONS: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NO-EXCEPTIONS-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-NO-EXCEPTIONS-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0]] {
// CHECK-NO-EXCEPTIONS-NEXT:  entry:
// CHECK-NO-EXCEPTIONS-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NO-EXCEPTIONS-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 2
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 100)
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END]]
// CHECK-NO-EXCEPTIONS:       if.end:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z14will_not_throwi(i32 noundef 200) #[[ATTR3]]
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 3
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END3:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then2:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 300)
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END3]]
// CHECK-NO-EXCEPTIONS:       if.end3:
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP4:%.*]] = icmp eq i32 [[TMP2]], 4
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP4]], label [[IF_THEN5:%.*]], label [[IF_END6:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then5:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z14will_not_throwi(i32 noundef 400) #[[ATTR3]]
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 500)
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END6]]
// CHECK-NO-EXCEPTIONS:       if.end6:
// CHECK-NO-EXCEPTIONS-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    [[CMP7:%.*]] = icmp eq i32 [[TMP3]], 5
// CHECK-NO-EXCEPTIONS-NEXT:    br i1 [[CMP7]], label [[IF_THEN8:%.*]], label [[IF_END9:%.*]]
// CHECK-NO-EXCEPTIONS:       if.then8:
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 900)
// CHECK-NO-EXCEPTIONS-NEXT:    br label [[IF_END9]]
// CHECK-NO-EXCEPTIONS:       if.end9:
// CHECK-NO-EXCEPTIONS-NEXT:    ret void
//
// CHECK-NORMAL-NOEXCEPT: Function Attrs: mustprogress noinline optnone
// CHECK-NORMAL-NOEXCEPT-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-NORMAL-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR5:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-NORMAL-NOEXCEPT-NEXT:  entry:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[X15:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 2
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 100)
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END]]
// CHECK-NORMAL-NOEXCEPT:       if.end:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 200) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 3
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END3:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then2:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 300)
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END3]]
// CHECK-NORMAL-NOEXCEPT:       if.end3:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP4:%.*]] = icmp eq i32 [[TMP2]], 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP4]], label [[IF_THEN5:%.*]], label [[IF_END9:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then5:
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 400) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 500)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[TRY_CONT:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP3:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP4:%.*]] = extractvalue { ptr, i32 } [[TMP3]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP4]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP5:%.*]] = extractvalue { ptr, i32 } [[TMP3]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP5]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[CATCH:%.*]]
// CHECK-NORMAL-NOEXCEPT:       catch:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP6:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 600) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 700)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT7:%.*]] unwind label [[LPAD6:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont7:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @__cxa_rethrow() #[[ATTR7]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[UNREACHABLE:%.*]] unwind label [[LPAD6]]
// CHECK-NORMAL-NOEXCEPT:       lpad6:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP7:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    cleanup
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP8:%.*]] = extractvalue { ptr, i32 } [[TMP7]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP8]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP9:%.*]] = extractvalue { ptr, i32 } [[TMP7]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP9]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @__cxa_end_catch()
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT8:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont8:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[EH_RESUME:%.*]]
// CHECK-NORMAL-NOEXCEPT:       try.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END9]]
// CHECK-NORMAL-NOEXCEPT:       if.end9:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP10:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[CMP10:%.*]] = icmp eq i32 [[TMP10]], 5
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[CMP10]], label [[IF_THEN11:%.*]], label [[IF_END19:%.*]]
// CHECK-NORMAL-NOEXCEPT:       if.then11:
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 900)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT13:%.*]] unwind label [[LPAD12:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont13:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[TRY_CONT18:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad12:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP11:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr @_ZTIi
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP12:%.*]] = extractvalue { ptr, i32 } [[TMP11]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP12]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP13:%.*]] = extractvalue { ptr, i32 } [[TMP11]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP13]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[CATCH_DISPATCH:%.*]]
// CHECK-NORMAL-NOEXCEPT:       catch.dispatch:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP14:%.*]] = call i32 @llvm.eh.typeid.for(ptr @_ZTIi) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[MATCHES:%.*]] = icmp eq i32 [[SEL]], [[TMP14]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br i1 [[MATCHES]], label [[CATCH14:%.*]], label [[EH_RESUME]]
// CHECK-NORMAL-NOEXCEPT:       catch14:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN16:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP15:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN16]]) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP15]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP16]], ptr [[X15]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXCEPTION:%.*]] = call ptr @__cxa_allocate_exception(i64 4) #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP17:%.*]] = load i32, ptr [[X15]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP17]], ptr [[EXCEPTION]], align 16
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @__cxa_throw(ptr [[EXCEPTION]], ptr @_ZTIi, ptr null) #[[ATTR7]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[UNREACHABLE]] unwind label [[LPAD17:%.*]]
// CHECK-NORMAL-NOEXCEPT:       lpad17:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP18:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    cleanup
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP19:%.*]] = extractvalue { ptr, i32 } [[TMP18]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    store ptr [[TMP19]], ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP20:%.*]] = extractvalue { ptr, i32 } [[TMP18]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[TMP20]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @__cxa_end_catch() #[[ATTR6]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[EH_RESUME]]
// CHECK-NORMAL-NOEXCEPT:       try.cont18:
// CHECK-NORMAL-NOEXCEPT-NEXT:    br label [[IF_END19]]
// CHECK-NORMAL-NOEXCEPT:       if.end19:
// CHECK-NORMAL-NOEXCEPT-NEXT:    ret void
// CHECK-NORMAL-NOEXCEPT:       eh.resume:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[EXN20:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[SEL21:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[LPAD_VAL:%.*]] = insertvalue { ptr, i32 } poison, ptr [[EXN20]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[LPAD_VAL22:%.*]] = insertvalue { ptr, i32 } [[LPAD_VAL]], i32 [[SEL21]], 1
// CHECK-NORMAL-NOEXCEPT-NEXT:    resume { ptr, i32 } [[LPAD_VAL22]]
// CHECK-NORMAL-NOEXCEPT:       terminate.lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP21:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP22:%.*]] = extractvalue { ptr, i32 } [[TMP21]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @__clang_call_terminate(ptr [[TMP22]]) #[[ATTR8]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
// CHECK-NORMAL-NOEXCEPT:       unreachable:
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
//
// CHECK-STRICT-NOEXCEPT: Function Attrs: mustprogress noinline optnone
// CHECK-STRICT-NOEXCEPT-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-STRICT-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR4:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-STRICT-NOEXCEPT-NEXT:  entry:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[X15:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP0]], 2
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 100)
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END]]
// CHECK-STRICT-NOEXCEPT:       if.end:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 200) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[TMP1]], 3
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_END3:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then2:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 300)
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END3]]
// CHECK-STRICT-NOEXCEPT:       if.end3:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP2:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP4:%.*]] = icmp eq i32 [[TMP2]], 4
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP4]], label [[IF_THEN5:%.*]], label [[IF_END9:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then5:
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 400) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 500)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[LPAD:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[TRY_CONT:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP3:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP4:%.*]] = extractvalue { ptr, i32 } [[TMP3]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP4]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP5:%.*]] = extractvalue { ptr, i32 } [[TMP3]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP5]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[CATCH:%.*]]
// CHECK-STRICT-NOEXCEPT:       catch:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP6:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z14will_not_throwi(i32 noundef 600) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z11might_throwi(i32 noundef 700)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT7:%.*]] unwind label [[LPAD6:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont7:
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @__cxa_rethrow() #[[ATTR7]]
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[UNREACHABLE:%.*]] unwind label [[LPAD6]]
// CHECK-STRICT-NOEXCEPT:       lpad6:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP7:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    cleanup
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP8:%.*]] = extractvalue { ptr, i32 } [[TMP7]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP8]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP9:%.*]] = extractvalue { ptr, i32 } [[TMP7]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP9]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @__cxa_end_catch()
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT8:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont8:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[EH_RESUME:%.*]]
// CHECK-STRICT-NOEXCEPT:       try.cont:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END9]]
// CHECK-STRICT-NOEXCEPT:       if.end9:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP10:%.*]] = load i32, ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[CMP10:%.*]] = icmp eq i32 [[TMP10]], 5
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[CMP10]], label [[IF_THEN11:%.*]], label [[IF_END19:%.*]]
// CHECK-STRICT-NOEXCEPT:       if.then11:
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 900)
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[INVOKE_CONT13:%.*]] unwind label [[LPAD12:%.*]]
// CHECK-STRICT-NOEXCEPT:       invoke.cont13:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[TRY_CONT18:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad12:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP11:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr @_ZTIi
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP12:%.*]] = extractvalue { ptr, i32 } [[TMP11]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP12]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP13:%.*]] = extractvalue { ptr, i32 } [[TMP11]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP13]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[CATCH_DISPATCH:%.*]]
// CHECK-STRICT-NOEXCEPT:       catch.dispatch:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP14:%.*]] = call i32 @llvm.eh.typeid.for(ptr @_ZTIi) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    [[MATCHES:%.*]] = icmp eq i32 [[SEL]], [[TMP14]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br i1 [[MATCHES]], label [[CATCH14:%.*]], label [[EH_RESUME]]
// CHECK-STRICT-NOEXCEPT:       catch14:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN16:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP15:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN16]]) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP15]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP16]], ptr [[X15]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXCEPTION:%.*]] = call ptr @__cxa_allocate_exception(i64 4) #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP17:%.*]] = load i32, ptr [[X15]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP17]], ptr [[EXCEPTION]], align 16
// CHECK-STRICT-NOEXCEPT-NEXT:    invoke void @__cxa_throw(ptr [[EXCEPTION]], ptr @_ZTIi, ptr null) #[[ATTR7]]
// CHECK-STRICT-NOEXCEPT-NEXT:    to label [[UNREACHABLE]] unwind label [[LPAD17:%.*]]
// CHECK-STRICT-NOEXCEPT:       lpad17:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP18:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    cleanup
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP19:%.*]] = extractvalue { ptr, i32 } [[TMP18]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    store ptr [[TMP19]], ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP20:%.*]] = extractvalue { ptr, i32 } [[TMP18]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[TMP20]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @__cxa_end_catch() #[[ATTR6]]
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[EH_RESUME]]
// CHECK-STRICT-NOEXCEPT:       try.cont18:
// CHECK-STRICT-NOEXCEPT-NEXT:    br label [[IF_END19]]
// CHECK-STRICT-NOEXCEPT:       if.end19:
// CHECK-STRICT-NOEXCEPT-NEXT:    ret void
// CHECK-STRICT-NOEXCEPT:       eh.resume:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[EXN20:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-STRICT-NOEXCEPT-NEXT:    [[SEL21:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    [[LPAD_VAL:%.*]] = insertvalue { ptr, i32 } poison, ptr [[EXN20]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    [[LPAD_VAL22:%.*]] = insertvalue { ptr, i32 } [[LPAD_VAL]], i32 [[SEL21]], 1
// CHECK-STRICT-NOEXCEPT-NEXT:    resume { ptr, i32 } [[LPAD_VAL22]]
// CHECK-STRICT-NOEXCEPT:       terminate.lpad:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP21:%.*]] = landingpad { ptr, i32 }
// CHECK-STRICT-NOEXCEPT-NEXT:    catch ptr null
// CHECK-STRICT-NOEXCEPT-NEXT:    [[TMP22:%.*]] = extractvalue { ptr, i32 } [[TMP21]], 0
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @__clang_call_terminate(ptr [[TMP22]]) #[[ATTR8:[0-9]+]]
// CHECK-STRICT-NOEXCEPT-NEXT:    unreachable
// CHECK-STRICT-NOEXCEPT:       unreachable:
// CHECK-STRICT-NOEXCEPT-NEXT:    unreachable
//
void exception_escape_is_ok(int x) {
  if (x == 2) {
#line 100
    will_throw();
  }
#line 200
  will_not_throw();
  if (x == 3) {
#line 300
    will_throw();
  }
  if (x == 4) {
    try {
#line 400
      will_not_throw();
#line 500
      will_throw();
    } catch (...) {
#line 600
      will_not_throw();
#line 700
      might_throw();
#line 800
      throw;
    }
  }
  if (x == 5) {
    try {
#line 900
      will_throw();
    } catch (int x) {
#line 1000
      throw x;
    }
  }
}
//.
// CHECK-NO-EXCEPTIONS: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NO-EXCEPTIONS: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NO-EXCEPTIONS: attributes #2 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NO-EXCEPTIONS: attributes #3 = { nounwind }
//.
// CHECK-NORMAL-NOEXCEPT: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #2 = { noinline noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #3 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #4 = { nounwind memory(none) }
// CHECK-NORMAL-NOEXCEPT: attributes #5 = { mustprogress noinline optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #6 = { nounwind }
// CHECK-NORMAL-NOEXCEPT: attributes #7 = { noreturn }
// CHECK-NORMAL-NOEXCEPT: attributes #8 = { noreturn nounwind }
//.
// CHECK-STRICT-NOEXCEPT: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #2 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #3 = { nounwind memory(none) }
// CHECK-STRICT-NOEXCEPT: attributes #4 = { mustprogress noinline optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #5 = { noinline noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #6 = { nounwind }
// CHECK-STRICT-NOEXCEPT: attributes #7 = { noreturn }
// CHECK-STRICT-NOEXCEPT: attributes #8 = { noreturn nounwind }
//.
//// NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
// CHECK-ALL: {{.*}}
// CHECK-EXCEPTIONS: {{.*}}
