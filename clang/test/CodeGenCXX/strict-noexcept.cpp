// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --check-attributes --check-globals
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions                                | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-NO-EXCEPTIONS
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions -fexceptions                   | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-EXCEPTIONS,CHECK-NORMAL-NOEXCEPT
// RUN: %clang_cc1 -emit-llvm %s -o - -triple x86_64-linux-gnu -fcxx-exceptions -fexceptions -fstrict-noexcept | FileCheck %s --check-prefixes=CHECK-ALL,CHECK-EXCEPTIONS,CHECK-STRICT-NOEXCEPT

void will_throw(int line = __builtin_LINE());

// CHECK-NO-EXCEPTIONS: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NO-EXCEPTIONS-LABEL: define {{[^@]+}}@_Z37exception_escape_is_termination_or_ubi
// CHECK-NO-EXCEPTIONS-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] {
// CHECK-NO-EXCEPTIONS-NEXT:  entry:
// CHECK-NO-EXCEPTIONS-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NO-EXCEPTIONS-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 100)
// CHECK-NO-EXCEPTIONS-NEXT:    ret void
//
// CHECK-NORMAL-NOEXCEPT: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NORMAL-NOEXCEPT-LABEL: define {{[^@]+}}@_Z37exception_escape_is_termination_or_ubi
// CHECK-NORMAL-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK-NORMAL-NOEXCEPT-NEXT:  entry:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    invoke void @_Z10will_throwi(i32 noundef 100)
// CHECK-NORMAL-NOEXCEPT-NEXT:    to label [[INVOKE_CONT:%.*]] unwind label [[TERMINATE_LPAD:%.*]]
// CHECK-NORMAL-NOEXCEPT:       invoke.cont:
// CHECK-NORMAL-NOEXCEPT-NEXT:    ret void
// CHECK-NORMAL-NOEXCEPT:       terminate.lpad:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP0:%.*]] = landingpad { ptr, i32 }
// CHECK-NORMAL-NOEXCEPT-NEXT:    catch ptr null
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[TMP1:%.*]] = extractvalue { ptr, i32 } [[TMP0]], 0
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @__clang_call_terminate(ptr [[TMP1]]) #[[ATTR4:[0-9]+]]
// CHECK-NORMAL-NOEXCEPT-NEXT:    unreachable
//
// CHECK-STRICT-NOEXCEPT: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-STRICT-NOEXCEPT-LABEL: define {{[^@]+}}@_Z37exception_escape_is_termination_or_ubi
// CHECK-STRICT-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0:[0-9]+]] {
// CHECK-STRICT-NOEXCEPT-NEXT:  entry:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 100) #[[ATTR3:[0-9]+]]
// CHECK-STRICT-NOEXCEPT-NEXT:    ret void
//
void exception_escape_is_termination_or_ub(int x) noexcept {
#line 100
  will_throw();
}

// CHECK-NO-EXCEPTIONS: Function Attrs: mustprogress noinline nounwind optnone
// CHECK-NO-EXCEPTIONS-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-NO-EXCEPTIONS-SAME: (i32 noundef [[X:%.*]]) #[[ATTR0]] {
// CHECK-NO-EXCEPTIONS-NEXT:  entry:
// CHECK-NO-EXCEPTIONS-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NO-EXCEPTIONS-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NO-EXCEPTIONS-NEXT:    call void @_Z10will_throwi(i32 noundef 100)
// CHECK-NO-EXCEPTIONS-NEXT:    ret void
//
// CHECK-NORMAL-NOEXCEPT: Function Attrs: mustprogress noinline optnone
// CHECK-NORMAL-NOEXCEPT-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-NORMAL-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR3:[0-9]+]] {
// CHECK-NORMAL-NOEXCEPT-NEXT:  entry:
// CHECK-NORMAL-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-NORMAL-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 100)
// CHECK-NORMAL-NOEXCEPT-NEXT:    ret void
//
// CHECK-STRICT-NOEXCEPT: Function Attrs: mustprogress noinline optnone
// CHECK-STRICT-NOEXCEPT-LABEL: define {{[^@]+}}@_Z22exception_escape_is_oki
// CHECK-STRICT-NOEXCEPT-SAME: (i32 noundef [[X:%.*]]) #[[ATTR2:[0-9]+]] {
// CHECK-STRICT-NOEXCEPT-NEXT:  entry:
// CHECK-STRICT-NOEXCEPT-NEXT:    [[X_ADDR:%.*]] = alloca i32, align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    store i32 [[X]], ptr [[X_ADDR]], align 4
// CHECK-STRICT-NOEXCEPT-NEXT:    call void @_Z10will_throwi(i32 noundef 100)
// CHECK-STRICT-NOEXCEPT-NEXT:    ret void
//
void exception_escape_is_ok(int x) {
#line 100
  will_throw();
}
//.
// CHECK-NO-EXCEPTIONS: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NO-EXCEPTIONS: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
//.
// CHECK-NORMAL-NOEXCEPT: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #2 = { noinline noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #3 = { mustprogress noinline optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-NORMAL-NOEXCEPT: attributes #4 = { noreturn nounwind }
// CHECK-NORMAL-NOEXCEPT: attributes #5 = { nounwind }
//.
// CHECK-STRICT-NOEXCEPT: attributes #0 = { mustprogress noinline nounwind optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #2 = { mustprogress noinline optnone "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
// CHECK-STRICT-NOEXCEPT: attributes #3 = { nounwind }
//.
//// NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
// CHECK-ALL: {{.*}}
// CHECK-EXCEPTIONS: {{.*}}
